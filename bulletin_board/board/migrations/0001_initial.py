# Generated by Django 5.1 on 2024-09-12 21:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('is_manager', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='board.branch')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_published', models.BooleanField(default=False)),
                ('business_number', models.CharField(max_length=100, verbose_name='사업자등록번호')),
                ('store_id', models.CharField(max_length=100, verbose_name='스토어아이디')),
                ('store_name', models.CharField(max_length=100, verbose_name='스토어명')),
                ('region', models.CharField(max_length=100, verbose_name='지역')),
                ('store_type', models.CharField(max_length=100, verbose_name='타입')),
                ('min_order_amount', models.CharField(max_length=100, verbose_name='최소주문금액')),
                ('employee_number', models.CharField(max_length=100, verbose_name='사번(대행사코드)')),
                ('notes', models.TextField(blank=True, verbose_name='비고')),
                ('store_category', models.CharField(max_length=100, verbose_name='스토어 유형')),
                ('sticker_status', models.CharField(max_length=100, verbose_name='스티커 부착 유무')),
                ('transfer_status', models.CharField(max_length=100, verbose_name='양도양수')),
                ('packaging', models.CharField(max_length=100, verbose_name='포장')),
                ('food_tech', models.CharField(max_length=100, verbose_name='푸드테크')),
                ('multiple_pos', models.CharField(max_length=100, verbose_name='다중포스')),
                ('store_phone', models.CharField(max_length=100, verbose_name='매장전화번호')),
                ('owner_contact', models.CharField(max_length=100, verbose_name='점주 연락처')),
                ('email', models.EmailField(max_length=254, verbose_name='이메일')),
                ('competitor_status', models.CharField(max_length=100, verbose_name='경쟁사 운영여부')),
                ('bm', models.CharField(max_length=100, verbose_name='BM')),
                ('bm1', models.CharField(max_length=100, verbose_name='BM1')),
                ('menu_board', models.CharField(max_length=100, verbose_name='메뉴판')),
                ('origin_info', models.CharField(max_length=100, verbose_name='원산지')),
                ('business_hours', models.CharField(max_length=100, verbose_name='영업시간')),
                ('images', models.FileField(upload_to='images/', verbose_name='이미지')),
                ('account_id', models.CharField(max_length=100, verbose_name='계정 아이디')),
                ('password', models.CharField(max_length=100, verbose_name='비번')),
                ('open_date', models.DateField(verbose_name='오픈희망일')),
                ('special_notes', models.TextField(blank=True, verbose_name='특이사항')),
                ('image1', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image4', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image5', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image6', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image7', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image8', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image9', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image10', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('image11', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('branch', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='board.branch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='board.post')),
            ],
        ),
    ]
